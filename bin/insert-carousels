#!/usr/bin/python3

import sys
import os
import glob
import logging
import re
import shlex
logging.basicConfig(level=logging.DEBUG)
from collections import OrderedDict
from common import normalize_topic

def make_carousel(label, title, files):
    ret = []
    if len(files) == 1:
        ret += '#+BEGIN_EXPORT html\n'
        ret += '   <img class="slide d-block w-100" src="'+files[0]+'"/>\n'
        ret += '#+END_EXPORT\n'
        return ret

    ret += '#+BEGIN_EXPORT html\n'
    ret += '<div class="content">'
    if title:
        ret += f'<span class="marginnote">Folien: {title}</span>\n'
    ret += '<div class="container">'
    ret += '<div id="slides-' + label +'" class="carousel" data-wrap="false" data-interval="0" data-ride="carousel">'
    ret += '<ol class="carousel-indicators">'
    li_opts = f'data-target="#slides-{label}"'
    ret += f'<li {li_opts} data-slide-to="0" class="active"></li>'
    for i in range(1, len(files)):
        ret += f'<li {li_opts} data-slide-to="'+str(i)+'"></li>'
    ret += '</ol>'
    ret += '<div class="carousel-inner">'
    active="active"
    for fn in files:
        ret += '<div class="carousel-item '+ active + '">'
        # On the image we will add an handler in org-bootstrap.js
        ret += '   <img class="slide d-block w-100" src="'+fn+'"/>'
        ret += '</div>'
        active=''
    ret += '</div>'
    ret += '<a class="carousel-control-prev" href="#slides-'+label+'" role="button" data-slide="prev">'
    ret += '<span class="carousel-control-prev-icon" aria-hidden="true"></span>'
    ret += '<span class="sr-only">Previous</span>'
    ret += '</a>'
    ret += '<a class="carousel-control-next" href="#slides-'+label+'" role="button" data-slide="next">'
    ret += '<span class="carousel-control-next-icon" aria-hidden="true"></span>'
    ret += '<span class="sr-only">Next</span>'
    ret += '</a>'
    ret += '</div>\n'
    ret += '</div>\n'
    ret += '</div>\n'
    ret += '#+END_EXPORT\n'
    return ret

def find_blocks(lines):
    tangle, start, end, title = True, None, None, None
    for idx, line in enumerate(lines):
        if "#+begin_src" in line.lower():
            tokens = shlex.split(line)
            start, end, title, tangle = idx, None, None, False
            if "latex" in tokens:
                tangle = True
                if ":tangle" in tokens and tokens[tokens.index(":tangle")+1] == "no":
                    tangle = False
            if ":title" in tokens:
                title = tokens[tokens.index(":title")+1]

        if "#+end_src" in line.lower() and tangle:
            end = idx
            yield(start, end, title)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"usage: {sys.argv[0]} [ORG-FILE] [TOPIC-FILE]")

    org, topics_fn = sys.argv[1:]
    with open(topics_fn) as fd:
        topics = OrderedDict()
        for _, lines, topic in [x.strip().split(":", 2) for x in fd.readlines()]:
            topic = normalize_topic(topic)
            basename = os.path.basename(topics_fn)
            base,_ = os.path.splitext(basename)
            output_dir = f"build/html"
            pattern = f"{output_dir}/{base}/{topic}-{lines}-*.svg"
            logging.info("pattern: %s", pattern)
            topics[(topic, lines)] = [os.path.relpath(x, output_dir) for x in sorted(glob.glob(pattern))]
            logging.info("%s %s slides: %s",topic, lines, len(topics[(topic, lines)]))


    with open(org) as fd:
        lines = list(fd.readlines())
        blocks = list(find_blocks(lines))
        for (topic,block_number), svgs in reversed(topics.items()):
            logging.info("%s %s",topic, block_number)
            start, end, title = blocks[int(block_number)-1]
            lines[start:end+1] = make_carousel(topic + block_number, title, svgs)

        print("".join(lines))
