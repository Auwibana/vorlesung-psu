#+TITLE: Programmiersprachen und Übersetzer
#+HTML_HEAD: <meta name="viewport" content="width=device-width, initial-scale=1"/>
#+HTML_HEAD: <link type="text/css" rel="stylesheet" href="css/bootstrap.min.css" />
#+HTML_HEAD: <link rel="stylesheet" href="css/tufte.css" type="text/css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/style.css" />
#+HTML_HEAD: <script type="text/javascript" src="js/jquery.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="js/org-bootstrap.js"></script>

Alles was man gerne hier sagen möchte.

1. [[file:01-einleitung.org][Einleitung]]
2. Technik: Lexen und Parsen
   - Tokenstrom, (Kontextfreie) Gramatiken, Abstrakter Syntaxbaum, Parsertechniken, Parsergeneratoren
3. Konzepte: Typen
   - Primitiv, Strukturierte und Unstrukturierte Komposition, Funktionstypen, Typableitungen, Typschablonen, Kompatibilität
4. Konzepte: Namen
   - Scoping, Lexikalisches und Dynamisches Binding, Type-directed Name Resolution, Overloading, Static and Dynamic Dispatch
5. Technik: Intermediate Code Generierung
   - 3-Address Code, Basic Blocks, Control-Fluss Graph, R-Values, L-Values
6. Konzepte: Objekte
   - Objekterzeugung, Initialisierung, Mixins, Prototype-Inheritance, Ownership, Lebenszeiten
7. Konzepte: Operationen
   - Standardkonstrukte, Auswertungsstrategie und Seiteneffekte, Daten und Verhalten, Verhaltenskomposition, Verhaltensableitung
8. Technik: Optimierung
   - Fixpunkt Analyse, Konstantenfortschreibung, Konstantenfolding, Dead Code Elimination
9. Technik: Machienencodegenerierung
   - Registerallokation, Instruction Scheduling, Funktionsaufrufe, ABI, Peephole Optimizer
10. Konzepte: Das Objektorientierte Paradigma
    - SOLID
    - https://de.wikipedia.org/wiki/Prinzipien_objektorientierten_Designs
11. Konzepte: Das Funktionale Paradigma
    - Freiheit von Seiteneffekten
12. Technik: Das Run-Time Environment
    - ELF und Dynamische Libraries, Garbage Colletion, Just-in-Time Compilation
13. Technik: Macros und Source-to-Source Transformation
    - C-Präprozessor/M4, Hygenische Macros, Transpilation, Domain Specific Languages
